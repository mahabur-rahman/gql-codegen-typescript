import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { User } from "../graphql/__generated__/graphql";

// Define the shape of the auth state
export interface AuthState {
  accessToken: string;
  user: User | null;
}

// Initialize the state with default values or values from localStorage
const initialState: AuthState = {
  accessToken: localStorage.getItem("accessToken") || "",
  user: localStorage.getItem("user") ? JSON.parse(localStorage.getItem("user")!) : null,
};

// Create the slice for auth management
const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    // Action to handle login
    login: (state, action: PayloadAction<{ token: string; user: User }>) => {
      state.accessToken = action.payload.token;
      state.user = action.payload.user;
      localStorage.setItem("accessToken", action.payload.token);
      localStorage.setItem("user", JSON.stringify(action.payload.user));
    },
    // Action to handle logout
    logout: (state) => {
      state.accessToken = "";
      state.user = null;
      localStorage.removeItem("accessToken");
      localStorage.removeItem("user");
    },
    // Action to handle rehydrating auth state from localStorage
    rehydrateAuth: (state) => {
      const token = localStorage.getItem("accessToken");
      const user = localStorage.getItem("user");
      if (token && user) {
        state.accessToken = token;
        state.user = JSON.parse(user);
      }
    },
  },
});

// Export the actions generated by the slice
export const { login, logout, rehydrateAuth } = authSlice.actions;

// Export the auth reducer as the default export
export default authSlice.reducer;
